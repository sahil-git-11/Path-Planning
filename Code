import numpy as np
import heapq
import matplotlib.pyplot as plt

class AStarPlanner:
    def __init__(self, grid, start, goal):
        self.grid = grid
        self.start = start
        self.goal = goal
        self.open_list = []
        self.closed_list = set()

    def heuristic(self, current, goal):
        return np.linalg.norm(np.array(current) - np.array(goal))

    def get_neighbors(self, node):
        neighbors = [
            (node[0] + 1, node[1]),
            (node[0] - 1, node[1]),
            (node[0], node[1] + 1),
            (node[0], node[1] - 1)
        ]
        return [(x, y) for x, y in neighbors if 0 <= x < self.grid.shape[0] and 0 <= y < self.grid.shape[1]]

    def a_star(self):
        heapq.heappush(self.open_list, (0, self.start))
        came_from = {self.start: None}
        cost_so_far = {self.start: 0}

        while self.open_list:
            _, current = heapq.heappop(self.open_list)

            if current == self.goal:
                path = []
                while current:
                    path.append(current)
                    current = came_from[current]
                path.reverse()
                return path

            self.closed_list.add(current)

            for neighbor in self.get_neighbors(current):
                if neighbor in self.closed_list:
                    continue

                new_cost = cost_so_far[current] + 1

                if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                    cost_so_far[neighbor] = new_cost
                    priority = new_cost + self.heuristic(neighbor, self.goal)
                    heapq.heappush(self.open_list, (priority, neighbor))
                    came_from[neighbor] = current
        return []

# Example Usage
grid = np.zeros((10, 10))
start = (0, 0)
goal = (9, 9)

planner = AStarPlanner(grid, start, goal)
path = planner.a_star()

# Visualize the path
plt.imshow(grid, cmap='gray')
for point in path:
    plt.plot(point[1], point[0], "ro")
plt.title("A* Path Planning")
plt.show()
